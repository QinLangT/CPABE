from pypbc import *
from tree import Node,build
import warnings
import pickle
# 忽略 DeprecationWarning 警告
warnings.filterwarnings("ignore", category=DeprecationWarning)
#set_point_format_uncompressed()
params_A = """type a
q 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791
h 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776
r 730750818665451621361119245571504901405976559617
exp2 159
exp1 107
sign1 1
sign0 1
"""
q = 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791
r = 730750818665451621361119245571504901405976559617
#q是椭圆曲线上有限域的大小，r是基点的阶
params = Parameters(param_string = params_A)
#params = Parameters(qbits=10, rbits=10)

pairing = Pairing(params)
#g = Element.random(pairing,G1)
g = Element(pairing,G1,value = "036DC0C7A1738F172135AA08CC9BB22E87BB04D853D24A89CE280A29133BA80D3D85F5648D1A89C7F72DCC60BC1D203F3F58C5E8771506B15200A5FC21270C9CEC")
g2=g**2
g_ = Element(pairing,G1,value = str(g2))
print(g2)
print(str(g2))
print(g_)
print(g**2==Element(pairing,G1,value=str(g**2)))